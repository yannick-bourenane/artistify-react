============
D.I.Y's
============


Our client demands a react version of the great artistify app !!!
The instructions below should help you to perfom the task.
You can find some preview images of the expected result @ client/src/assets/img/previews/



-------------
A / Forms
-------------

Forms for labels and styles are provided. You will need to implement those :

- Form Create Artist
Code a form to Create/Update artists.

***

- Form Create Album
Code a form to Create/Update artists.

Warnings :
- artist's model depends on styles
- album's model depends on artist and label


-------------
B / List and cards
-------------

- Artists
Fetch all artists from the database.
Display a card for each album.
Provide a router <Link> to=`artists/${artists._id}`, leading to separate component Artist (details) component.
If the artists list is empty, provide a default view.

- Albums
Fetch all Albums from the database.
Display a card for each album.
Provide a router <Link> to=`albums/${album._id}`, leading to separate Album (details) component.
If the albums list is empty, provide a default view.


-------------
C / Resources Details
-------------
- Artists
Fetch all artists from the database.
Display a card for each artist.
Provide a router <Link> to="artists/artists.id",
leading to separate component Artist (details) component.
If the artists list is empty, provide a default view.

- Albums
Fetch all Albums from the database.
Display a card for each album.
Provide a router <Link> to="albums/album.id",
leading to separate Album (details) component.
If the albums list is empty, provide a default view.

- Artist / Album (details)
Use the image below to code the {`<Album />`} component.
This component import 2 bonus child components: <Stars /> and <Comments />


============
Bonuses
============

***

- Comments
Import a custom <Comments /> allowing the end-users to post comments in database related to the current artist/album.

***

- Stars
The Stars component allow the end-users to rate an artist/album.
The black stars represent the average rate for a given resource.
The yellow stars represent the logged in user rate from the current album.
Bonus: make it modular to rate labels/styles as well.

***

- IconFavorite
Import a custom <IconFavorite /> on each artist card.
When clicked, send an axios.patch request to add the artist to the user's favorites.

***

- User favorites
Fetch currentUser's favorites with axios.
Update the rendered template to display them.
It would be better to create a dedicated component.

***

- Latest Artists / Latest Albums

Code a complete client/server cycle to fetch the 2 latests artists AND albums.
Why don't you try CSS grid to organise the results display ?

***

- Best rated artists / albums
Code a complete client/server cycle to fetch the 4 best rated artists AND albums

*** 

- Dataviz

Freestyle: Use chart.js or d3.js libs to create a nice looking chart, using the artistify api's data.

